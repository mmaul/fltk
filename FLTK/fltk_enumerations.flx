
@h2 \name Version Numbers

    FLTK defines some constants to help the programmer to
    find out, for which FLTK version a program is compiled.
    
    The following constants are defined:

   The major release version of this FLTK library.
   \sa FL_VERSION
@felix
const FL_MAJOR_VERSION:int;

//$   The minor release version for this library.
//$   FLTK remains mostly source-code compatible between minor version changes.
const FL_MINOR_VERSION:int;

//$   The patch version for this library.
//$   FLTK remains binary compatible between patches.
const FL_PATCH_VERSION:double;

@h2    The FLTK version number as a \em double.

    FL_VERSION is a double that describes the major and minor version numbers.
    Version 1.1 is actually stored as 1.01 to allow for more than 9 minor
    releases.

    The FL_MAJOR_VERSION, FL_MINOR_VERSION, and FL_PATCH_VERSION constants
    give the integral values for the major, minor, and patch releases
    respectively.
@felix
const FL_VERSION:double;

@h2    Every time a user moves the mouse pointer, clicks a button,
    or presses a key, an event is generated and sent to your
    application. Events can also come from other programs like the
    window manager.
   
    Events are identified by the integer argument passed to the 
    Fl_Widget::handle() virtual method. Other information about the 
    most recent event is stored in static locations and acquired  by 
    calling the Fl::event_*() methods. This static information remains 
    valid until the next event is read from the window system, so it 
    is ok to look at it outside of the handle() method.

    \sa Fl::event_text(), Fl::event_key(), class Fl::
@felix
//cenum Fl_Event =	// events
cflags Fl_Event=
  //$ No event.
FL_NO_EVENT,

@h2   A mouse button has gone down with the mouse pointing at this
      widget. You can find out what button by calling Fl::event_button(). 
      You find out the mouse position by calling Fl::event_x() and
      Fl::event_y().
      A widget indicates that it "wants" the mouse click by returning non-zero 
      from its Fl_Widget::handle() method. It will then become the 
      Fl::pushed() widget and will get FL_DRAG and the matching FL_RELEASE events.  
      If Fl_Widget::handle() returns zero then FLTK will try sending the FL_PUSH 
      to another widget. 
@felix
FL_PUSH,
@h2
      A mouse button has been released. You can find out what button by 
      calling Fl::event_button().

      In order to receive the FL_RELEASE event, the widget must return 
      non-zero when handling FL_PUSH.
@felix
FL_RELEASE,
@h2   The mouse has been moved to point at this widget.  This can
      be used for highlighting feedback.  If a widget wants to
      highlight or otherwise track the mouse, it indicates this by
      returning non-zero from its handle() method. It then
      becomes the Fl::belowmouse() widget and will receive 
      FL_MOVE and FL_LEAVE events.
@felix
FL_ENTER,
//const  FL_ENTER:int;//,
  //$  The mouse has moved out of the widget.
  //$    In order to receive the FL_LEAVE event, the widget must 
  //$    return non-zero when handling FL_ENTER.
   
FL_LEAVE,
@h2   The mouse has moved with a button held down. The current button state 
      is in Fl::event_state(). The mouse position is in Fl::event_x() and 
      Fl::event_y().

      In order to receive FL_DRAG events, the widget must return non-zero 
      when handling FL_PUSH.
@felix
FL_DRAG,
@h2   This indicates an <I>attempt</I> to give a widget the keyboard focus.

      If a widget wants the focus, it should change itself to display the 
      fact that it has the focus, and return non-zero from its handle() method.
      It then becomes the Fl::focus() widget and gets FL_KEYDOWN, FL_KEYUP, 
      and FL_UNFOCUS events.

      The focus will change either because the window manager changed which 
      window gets the focus, or because the user tried to navigate using tab, 
      arrows, or other keys. You can check Fl::event_key() to figure out why 
      it moved. For navigation it will be the key pressed and for interaction 
      with the window manager it will be zero.
@felix
FL_FOCUS,
  
  //$ This event is sent to the previous Fl::focus() widget when another 
  //$    widget gets the focus or the window loses focus.

FL_UNFOCUS,

@h2   A key was pressed (FL_KEYDOWN) or released (FL_KEYUP). 
      Fl_KEYBOARD is a synonym for FL_KEYDOWN.
      The key can be found in Fl::event_key().
      The text that the key should insert can be found with Fl::event_text() 
      and its length is in Fl::event_length(). If you use the key handle()
      should return 1. If you return zero then FLTK assumes you ignored the 
      key and will then attempt to send it to a parent widget. If none of 
      them want it, it will change the event into a FL_SHORTCUT event.

      To receive FL_KEYBOARD events you must also respond to the FL_FOCUS
      and FL_UNFOCUS events.

      If you are writing a text-editing widget you may also want to call 
      the Fl::compose() function to translate individual keystrokes into 
      non-ASCII characters.

      FL_KEYUP events are sent to the widget that currently has focus. This 
      is not necessarily the same widget that received the corresponding 
      FL_KEYDOWN event because focus may have changed between events.
@felix
FL_KEYDOWN,

  //$ Equivalent to FL_KEYDOWN.
  //$    \see FL_KEYDOWN
   
FL_KEYBOARD,
 
  //$ Key release event.
  //$    \see FL_KEYDOWN
   
FL_KEYUP,

@h2   The user clicked the close button of a window.
      This event is used internally only to trigger the callback of
      Fl_Window derived classed. The default callback closes the 
      window calling Fl_Window::hide().
@felix
FL_CLOSE,

@h2   The mouse has moved without any mouse buttons held down. 
      This event is sent to the Fl::belowmouse() widget.

      In order to receive FL_MOVE events, the widget must return 
      non-zero when handling FL_ENTER.
@felix
FL_MOVE,

@h2   If the Fl::focus() widget is zero or ignores an FL_KEYBOARD
      event then FLTK tries sending this event to every widget it 
      can, until one of them returns non-zero. FL_SHORTCUT is first 
      sent to the Fl::belowmouse() widget, then its parents and siblings, 
      and eventually to every widget in the window, trying to find an 
      object that returns non-zero. FLTK tries really hard to not to ignore 
      any keystrokes!

      You can also make "global" shortcuts by using Fl::add_handler(). A 
      global shortcut will work no matter what windows are displayed or 
      which one has the focus.
@felix
FL_SHORTCUT,

@h2   This widget is no longer active, due to Fl_Widget::deactivate() 
      being called on it or one of its parents. Fl_Widget::active() may 
      still be true after this, the widget is only active if Fl_Widget::active()
      is true on it and all its parents (use Fl_Widget::active_r() to check this).
@felix
FL_DEACTIVATE,

  //$ This widget is now active, due to Fl_Widget::activate() being 
  //$    called on it or one of its parents.
   
FL_ACTIVATE,

@h2   This widget is no longer visible, due to Fl_Widget::hide() being 
      called on it or one of its parents, or due to a parent window being 
      minimized.  Fl_Widget::visible() may still be true after this, but the 
      widget is visible only if visible() is true for it and all its 
      parents (use Fl_Widget::visible_r() to check this).
@felix   
FL_HIDE,

@h2   This widget is visible again, due to Fl_Widget::show() being called on 
      it or one of its parents, or due to a parent window being restored. 
      Child Fl_Windows respond to this by actually creating the window if not 
      done already, so if you subclass a window, be sure to pass FL_SHOW 
      to the base class Fl_Widget::handle() method!
@felix   
FL_SHOW,

  /** You should get this event some time after you call Fl::paste(). 
      The contents of Fl::event_text() is the text to insert and the number 
      of characters is in Fl::event_length().
   */
FL_PASTE,

@h2   The Fl::selection_owner() will get this event before the selection is 
      moved to another widget. This indicates that some other widget or program 
      has claimed the selection. Motif programs used this to clear the selection 
      indication. Most modern programs ignore this.
@felix   
FL_SELECTIONCLEAR,

@h2   The user has moved the mouse wheel. The Fl::event_dx() and Fl::event_dy()
      methods can be used to find the amount to scroll horizontally and vertically.
@felix   
FL_MOUSEWHEEL,

@h2   The mouse has been moved to point at this widget. A widget that is 
      interested in receiving drag'n'drop data must return 1 to receive 
      FL_DND_DRAG, FL_DND_LEAVE and FL_DND_RELEASE events.
@felix   
FL_DND_ENTER,

@h2   The mouse has been moved inside a widget while dragging data.  A 
      widget that is interested in receiving drag'n'drop data should 
      indicate the possible drop position.
@felix
FL_DND_DRAG,

//$   The mouse has moved out of the widget.

FL_DND_LEAVE,

  //$ The user has released the mouse button dropping data into the widget. 
  //$    If the widget returns 1, it will receive the data in the immediately 
  //$    following FL_PASTE event.
   
FL_DND_RELEASE;

fun to_int:Fl_Event->int = "(int)$1";
@h2 \name When Conditions 
@h3
* These constants determine when a callback is performed.

    \sa Fl_Widget::when();
    \todo doxygen comments for values are incomplete and maybe wrong or unclear
@felix
cenum Fl_When = // Fl_Widget::when():
  FL_WHEN_NEVER, //$	= 0,	///< Never call the callback
  FL_WHEN_CHANGED,//$	= 1,	///< Do the callback only when the widget value changes
  FL_WHEN_NOT_CHANGED,//$	= 2,	///< Do the callback whenever the user interacts with the widget
  FL_WHEN_RELEASE,//$	= 4,	///< Do the callback when the button or key is released and the value changes
  FL_WHEN_RELEASE_ALWAYS,//$     = 6,	///< Do the callback when the button or key is released, even if the value doesn't change
  FL_WHEN_ENTER_KEY,//$	= 8,	///< Do the callback when the user presses the ENTER key and the value changes
  FL_WHEN_ENTER_KEY_ALWAYS,//$ =10,	///< Do the callback when the user presses the ENTER key, even if the value doesn't change
  FL_WHEN_ENTER_KEY_CHANGED;//$ =11	///< ?
typedef fl_when = Fl_When;

fun fl_when_to_int: fl_when->int = "(int)$1;";


@h2 \name Mouse and Keyboard Events

	This and the following constants define the non-ASCII keys on the
	keyboard for FL_KEYBOARD and FL_SHORTCUT events.

	\todo	FL_Button and FL_key... constants could be structured better
		(use an enum or some doxygen grouping ?)
  
	\sa	Fl::event_key() and Fl::get_key(int) (use ascii letters for all other keys):
@felix

// FIXME: These codes collide with valid Unicode keys

const FL_Button:uint;//	0xfee8	///< A mouse button; use Fl_Button + n for mouse button n.
const FL_BackSpace:uint;//	0xff08	///< The backspace key.
const FL_Tab:uint;//		0xff09	///< The tab key.
const FL_Enter:uint;//	0xff0d	///< The enter key. 
const FL_Pause:uint;//	0xff13	///< The pause key.
const FL_Scroll_Lock:uint;//	0xff14	///< The scroll lock key.
const FL_Escape:uint;//	0xff1b	///< The escape key.
const FL_Home:uint;//		0xff50	///< The home key.
const FL_Left:uint;//		0xff51	///< The left arrow key.
const FL_Up:uint;//		0xff52	///< The up arrow key.
const FL_Right:uint;//	0xff53	///< The right arrow key.
const FL_Down:uint;//		0xff54	///< The down arrow key.
const FL_Page_Up:uint;//	0xff55	///< The page-up key.
const FL_Page_Down:uint;//	0xff56	///< The page-down key.
const FL_End:uint;//		0xff57	///< The end key.
const FL_Print:uint;//	0xff61	///< The print (or print-screen) key.
const FL_Insert:uint;//	0xff63	///< The insert key. 
const FL_Menu:uint;//		0xff67	///< The menu key.
const FL_Help:uint;//		0xff68	///< The 'help' key on Mac keyboards
const FL_Num_Lock:uint;//	0xff7f	///< The num lock key.
const FL_KP:uint;//		0xff80	///< One of the keypad numbers; use FL_KP + n for number n.
const FL_KP_Enter:uint;//	0xff8d	///< The enter key on the keypad, same as Fl_KP+'\\r'.
const FL_KP_Last:uint;//	0xffbd	///< The last keypad key; use to range-check keypad.

const FL_F_Last:uint;//	0xffe0	///< The last function key; use to range-check function keys.
const FL_Shift_L:uint;//	0xffe1	///< The lefthand shift key.
const FL_Shift_R:uint;//	0xffe2	///< The righthand shift key.
const FL_Control_L:uint;//	0xffe3	///< The lefthand control key.
const FL_Control_R:uint;//	0xffe4	///< The righthand control key.
const FL_Caps_Lock:uint;//	0xffe5	///< The caps lock key.
const FL_Meta_L:uint;//	0xffe7	///< The left meta/Windows key.
const FL_Meta_R:uint;//	0xffe8	///< The right meta/Windows key.
const FL_Alt_L:uint;//	0xffe9	///< The left alt key.
const FL_Alt_R:uint;//	0xffea	///< The right alt key. 
const FL_Delete:uint;//	0xffff	///< The delete key.

// These use the Private Use Area (PUA) of the Basic Multilingual Plane
// of Unicode. Guaranteed not to conflict with a proper Unicode character.

// These primarily map to the XFree86 keysym range
const FL_Volume_Down:uint;//  0xEF11   /* Volume control down        */
const FL_Volume_Mute:uint;//  0xEF12   /* Mute sound from the system */
const FL_Volume_Up:uint;//    0xEF13   /* Volume control up          */
const FL_Media_Play:uint;//   0xEF14   /* Start playing of audio     */
const FL_Media_Stop:uint;//   0xEF15   /* Stop playing audio         */
const FL_Media_Prev:uint;//   0xEF16   /* Previous track             */
const FL_Media_Next:uint;//   0xEF17   /* Next track                 */
const FL_Home_Page:uint;//    0xEF18   /* Display user's home page   */
const FL_Mail:uint;//         0xEF19   /* Invoke user's mail program */
const FL_Search:uint;//       0xEF1B   /* Search                     */
const FL_Back:uint;//         0xEF26   /* Like back on a browser     */
const FL_Forward:uint;//      0xEF27   /* Like forward on a browser  */
const FL_Stop:uint;//         0xEF28   /* Stop current operation     */
const FL_Refresh:uint;//      0xEF29   /* Refresh the page           */
const FL_Sleep:uint;//        0xEF2F   /* Put system to sleep        */
const FL_Favorites:uint;//    0xEF30   /* Show favorite locations    */

/** \name Mouse Buttons

	These constants define the button numbers for FL_PUSH and FL_RELEASE events.
	
	\sa Fl::event_button()
*/

/*@{*/

const FL_LEFT_MOUSE:int;//	1	///< The left mouse button
const FL_MIDDLE_MOUSE:int;//	2	///< The middle mouse button
const FL_RIGHT_MOUSE:int;//	3	///< The right mouse button

/*@}*/		// group: Mouse Buttons


/** \name	Event States

	The following constants define bits in the Fl::event_state() value.
*/
  val FL_MENU_INACTIVE = 1;		///< Deactivate menu item (gray out)
  val FL_MENU_TOGGLE = 2;		///< Item is a checkbox toggle (shows checkbox for on/off state)
  val FL_MENU_VALUE = 4;		///< The on/off state for checkbox/radio buttons (if set, state is 'on')
  val FL_MENU_RADIO = 8;		///< Item is a radio button (one checkbox of many can be on)
  val FL_MENU_INVISIBLE = 0x10;	///< Item will not show up (shortcut will work)
  val FL_SUBMENU_POINTER = 0x20ut;	///< Indicates user_data() is a pointer to another menu array
  val FL_SUBMENU = 0x40; 		///< This item is a submenu to other items
  val FL_MENU_DIVIDER = 0x80;	///< Creates divider line below this item. Also ends a group of radio buttons.
  val FL_MENU_HORIZONTAL = 0x100;

  cenum Fl_Menu_Flags = // values for flags:
  xFL_MENU_INACTIVE, //=1,		///< Deactivate menu item (gray out)
  xFL_MENU_TOGGLE, //= 2,		///< Item is a checkbox toggle (shows checkbox for on/off state)
  xFL_MENU_VALUE, // = 4,		///< The on/off state for checkbox/radio buttons (if set, state is 'on')
  xFL_MENU_RADIO, // = 8,		///< Item is a radio button (one checkbox of many can be on)
  xFL_MENU_INVISIBLE, // = 0x10,	///< Item will not show up (shortcut will work)
  xFL_SUBMENU_POINTER, // = 0x20,	///< Indicates user_data() is a pointer to another menu array
  xFL_SUBMENU, // = 0x40, 		///< This item is a submenu to other items
  xFL_MENU_DIVIDER, // = 0x80,	///< Creates divider line below this item. Also ends a group of radio buttons.
  xFL_MENU_HORIZONTAL; // = 0x100	///< ??? -- reserved

//cflags Fl_Labeltype =	// labeltypes:
//  FL_NORMAL_LABEL,//	= 0,	///< draws the text (0)
//  FL_NO_LABEL,			///< does nothing
//  _FL_SHADOW_LABEL,		///< draws a drop shadow under the text
//  _FL_ENGRAVED_LABEL,		///< draws edges as though the text is engraved
//  _FL_EMBOSSED_LABEL,		///< draws edges as though the text is raised
//  _FL_MULTI_LABEL,		///< ?
//  _FL_ICON_LABEL,		///< draws the icon associated with the text
//  _FL_IMAGE_LABEL,		///< ?

//  FL_FREE_LABELTYPE;		///< first free labeltype to use for creating own labeltypes
typedef Fl_Labeltype = int;
const FL_NORMAL_LABEL:int;
const FL_NO_LABEL:int;
const FL_SYMBOL_LABEL:int;
const FL_FREE_LABEL:int;
const FL_SHADOW_LABEL:int;
const FL_EMBOSSED_LABEL:int;
const FL_ENGRAVED_LABEL:int;
typedef fl_labeltype = Fl_Labeltype;
//fun  fl_define_FL_SHADOW_LABEL:1->Fl_Labeltype = "fl_define_FL_SHADOW_LABEL()";
//val FL_SHADOW_LABEL = fl_define_FL_SHADOW_LABEL();
//fun  fl_define_FL_ENGRAVED_LABEL:1->Fl_Labeltype = "fl_define_FL_ENGRAVED_LABEL()";
//val FL_ENGRAVED_LABEL = fl_define_FL_ENGRAVED_LABEL();
//fun  fl_define_FL_EMBOSSED_LABEL:1->Fl_Labeltype = "fl_define_FL_EMBOSSED_LABEL()";
//val FL_EMBOSSED_LABEL = fl_define_FL_EMBOSSED_LABEL();

type Fl_Font = "Fl_Font";
typedef fl_font = Fl_Font;
fun +: Fl_Font*Fl_Font->Fl_Font = "$1+$2";
const FL_HELVETICA:Fl_Font;//              = 0;	///< Helvetica (or Arial) normal (0)
const FL_HELVETICA_BOLD:Fl_Font;//         = 1;	///< Helvetica (or Arial) bold
const FL_HELVETICA_ITALIC:Fl_Font;//       = 2;	///< Helvetica (or Arial) oblique
const FL_HELVETICA_BOLD_ITALIC:Fl_Font;//  = 3;	///< Helvetica (or Arial) bold-oblique
const FL_COURIER:Fl_Font;//                = 4;	///< Courier normal
const FL_COURIER_BOLD:Fl_Font;//           = 5;	///< Courier bold 
const FL_COURIER_ITALIC:Fl_Font;//         = 6;	///< Courier italic
const FL_COURIER_BOLD_ITALIC:Fl_Font;//    = 7;	///< Courier bold-italic
const FL_TIMES:Fl_Font;//                  = 8;	///< Times roman
const FL_TIMES_BOLD:Fl_Font;//             = 9;	///< Times roman bold
const FL_TIMES_BOLD_ITALIC :Fl_Font;//     = 11;	///< Times roman bold-italic
const FL_SYMBOL:Fl_Font;//                 = 12;	///< Standard symbol font
const FL_SCREEN:Fl_Font;//                 = 13;	///< Default monospaced screen font
const FL_SCREEN_BOLD:Fl_Font;//            = 14;	///< Default monospaced bold screen font
const FL_ZAPF_DINGBATS :Fl_Font;//         = 15;	///< Zapf-dingbats font

const FL_FREE_FONT:Fl_Font;//              = 16;	///< first one to allocate
const FL_BOLD:Fl_Font;//                   = 1;	///< add this to helvetica, courier, or times
const FL_ITALIC:Fl_Font;//                 = 2;	///< add this to helvetica, courier, or times
const FL_BOLD_ITALIC:Fl_Font;//            = 3;	///< add this to helvetica, courier, or times


//type Fl_Fontsize;
typedef Fl_Fontsize = int;
typedef fl_fontsize = Fl_Fontsize;
//extern FL_EXPORT Fl_Fontsize FL_NORMAL_SIZE;	///< normal font size

/** \name Colors 
    The Fl_Color type holds an FLTK color value.

    Colors are either 8-bit indexes into a virtual colormap
    or 24-bit RGB color values.

    Color indices occupy the lower 8 bits of the value, while
    RGB colors occupy the upper 24 bits, for a byte organization of RGBI.

<pre>
 Fl_Color => 0xrrggbbii
                | | | |
                | | | +--- index between 0 and 255
                | | +----- blue color component (8 bit)
                | +------- green component (8 bit)
                +--------- red component (8 bit)
 </pre>

    A color can have either an index or an rgb value. Colors with rgb set 
    and an index >0 are reserved for special use.

 */
/*@{*/
/** an FLTK color value */
//typedef unsigned int Fl_Color;
type Fl_Color = "Fl_Color";
typedef fl_color = Fl_Color;
// Standard colors. These are used as default colors in widgets and altered as necessary
const FL_FOREGROUND_COLOR:Fl_Color;//  = 0;	///< the default foreground color (0) used for labels and text
const FL_BACKGROUND2_COLOR:Fl_Color;// = 7;	///< the default background color for text, list, and valuator widgets
const FL_INACTIVE_COLOR:Fl_Color;//    = 8;	///< the inactive foreground color
const FL_SELECTION_COLOR:Fl_Color;//   = 15;	///< the default selection/highlight color

  // boxtypes generally limit themselves to these colors so
  // the whole ramp is not allocated:

const FL_GRAY0:Fl_Color;//   = 32;			// 'A'
const FL_DARK3:Fl_Color;//   = 39;			// 'H'
const FL_DARK2:Fl_Color;//   = 45;			// 'N'
const FL_DARK1:Fl_Color;//   = 47;			// 'P'
const FL_BACKGROUND_COLOR:Fl_Color;// = 49;	// 'R' default background color
const FL_LIGHT1:Fl_Color;//  = 50;			// 'S'
const FL_LIGHT2:Fl_Color;//  = 52;			// 'U'
const FL_LIGHT3:Fl_Color;//  = 54;			// 'W'

  // FLTK provides a 5x8x5 color cube that is used with colormap visuals

const FL_BLACK:Fl_Color;//   = 56;
const FL_RED:Fl_Color;//     = 88;
const FL_GREEN:Fl_Color;//   = 63;
const FL_YELLOW:Fl_Color;//  = 95;
const FL_BLUE:Fl_Color;//    = 216;
const FL_MAGENTA:Fl_Color;// = 248;
const FL_CYAN:Fl_Color;//    = 223;
const FL_DARK_RED:Fl_Color;// = 72;

const FL_DARK_GREEN:Fl_Color;//    = 60;
const FL_DARK_YELLOW:Fl_Color;//   = 76;
const FL_DARK_BLUE:Fl_Color;//     = 136;
const FL_DARK_MAGENTA:Fl_Color;//  = 152;
const FL_DARK_CYAN:Fl_Color;//     = 140;

const FL_WHITE:Fl_Color;//         = 255;


//const FL_FREE_COLOR:Fl_Color;//     (Fl_Color)16
const FL_FREE_COLOR:Fl_Color;
//const FL_NUM_FREE_COLOR:Fl_Color;// 16
const FL_NUM_FREE_COLOR:uint;
//const FL_GRAY_RAMP:Fl_Color;//      (Fl_Color)32
//const FL_NUM_GRAY:Fl_Color;//       24
const FL_GRAY:Fl_Color;//           FL_BACKGROUND_COLOR
//const FL_COLOR_CUBE:Fl_Color;//     (Fl_Color)56
//const FL_NUM_RED:Fl_Color;//        5
//const FL_NUM_GREEN:Fl_Color;//      8
//const FL_NUM_BLUE:Fl_Color;//       5


//FL_EXPORT Fl_Color fl_inactive(Fl_Color c);
gen fl_inactive: Fl_Color->Fl_Color;
//FL_EXPORT Fl_Color fl_contrast(Fl_Color fg, Fl_Color bg);
gen fl_contrast: Fl_Color*Fl_Color->Fl_Color;
//FL_EXPORT Fl_Color fl_color_average(Fl_Color c1, Fl_Color c2, float weight);
gen Fl_color_average: Fl_Color*Fl_Color*float->Fl_Color;
/** Returns a lighter version of the specified color. */
//inline Fl_Color fl_lighter(Fl_Color c) { return fl_color_average(c, FL_WHITE, .67f); }
gen fl_lighter: Fl_Color->Fl_Color;

/** Returns a darker version of the specified color. */
//inline Fl_Color fl_darker(Fl_Color c) { return fl_color_average(c, FL_BLACK, .67f); }
gen fl_darker: Fl_Color->Fl_Color;

/** Returns the 24-bit color value closest to \p r, \p g, \p b. */
//inline Fl_Color fl_rgb_color(uchar r, uchar g, uchar b) {
//  if (!r && !g && !b) return FL_BLACK;
//  else return (Fl_Color)(((((r << 8) | g) << 8) | b) << 8);
//}

///** Returns the 24-bit color value closest to \p g (grayscale). */
//inline Fl_Color fl_rgb_color(uchar g) {
//  if (!g) return FL_BLACK;
//  else return (Fl_Color)(((((g << 8) | g) << 8) | g) << 8);
//}
gen fl_rgb_color: utiny->Fl_Color;
/** Returns a gray color value from black (i == 0) to white (i == FL_NUM_GRAY - 1). 
    FL_NUM_GRAY is defined to be 24 in the current FLTK release. 
    To get the closest FLTK gray value to an 8-bit grayscale color 'I' use:

 \code 
   fl_gray_ramp(I * (FL_NUM_GRAY - 1) / 255)
 \endcode
*/ 
//inline Fl_Color fl_gray_ramp(int i) {return (Fl_Color)(i+FL_GRAY_RAMP);}
gen fl_gray_ramp: int->Fl_Color;

/** Returns a color out of the color cube.

  \p r must be in the range 0 to FL_NUM_RED (5) minus 1, 
  \p g must be in the range 0 to FL_NUM_GREEN (8) minus 1,
  \p b must be in the range 0 to FL_NUM_BLUE (5) minus 1.

  To get the closest color to a 8-bit set of R,G,B values use:

  \code
    fl_color_cube(R * (FL_NUM_RED - 1) / 255,
       G * (FL_NUM_GREEN - 1) / 255,
       B * (FL_NUM_BLUE - 1) / 255);
  \endcode
 */
//inline Fl_Color fl_color_cube(int r, int g, int b) {
//  return (Fl_Color)((b*FL_NUM_RED + r) * FL_NUM_GREEN + g + FL_COLOR_CUBE);}

/*@}*/		// group: Colors  

/** \name Cursors */
/*@{*/

/** The following constants define the mouse cursors that are available in FLTK.

    The double-headed arrows are bitmaps provided by FLTK on X, the others
    are provided by system-defined cursors.

    \todo enum Fl_Cursor needs maybe an image.
*/
cenum Fl_Cursor =
  FL_CURSOR_DEFAULT,//	=  0, /**< the default cursor, usually an arrow. */
  FL_CURSOR_ARROW,//	= 35, /**< an arrow pointer. */
  FL_CURSOR_CROSS,//	= 66, /**< crosshair. */
  FL_CURSOR_WAIT,//	= 76, /**< watch or hourglass. */
  FL_CURSOR_INSERT,//	= 77, /**< I-beam. */
  FL_CURSOR_HAND,//	= 31, /**< hand (uparrow on MSWindows). */
  FL_CURSOR_HELP,//	= 47, /**< question mark. */
  FL_CURSOR_MOVE,//	= 27, /**< 4-pointed arrow. */
  // fltk provides bitmaps for these:
  FL_CURSOR_NS,//		= 78, /**< up/down arrow. */
  FL_CURSOR_WE,//		= 79, /**< left/right arrow. */
  FL_CURSOR_NWSE,//	= 80, /**< diagonal arrow. */
  FL_CURSOR_NESW,//	= 81, /**< diagonal arrow. */
  FL_CURSOR_NONE,//	=255, /**< invisible. */
  // for back compatibility (non MSWindows ones):
  FL_CURSOR_N,//		= 70, /**< for back compatibility. */
  FL_CURSOR_NE,//		= 69, /**< for back compatibility. */
  FL_CURSOR_E,//		= 49, /**< for back compatibility. */
  FL_CURSOR_SE,//		=  8, /**< for back compatibility. */
  FL_CURSOR_S,//		=  9, /**< for back compatibility. */
  FL_CURSOR_SW,//		=  7, /**< for back compatibility. */
  FL_CURSOR_W,//		= 36, /**< for back compatibility. */
  FL_CURSOR_NW;//		= 68 /**< for back compatibility. */
typedef fl_cursor = Fl_Cursor;
/*@}*/		// group: Cursors  

/** FD "when" conditions */
//enum { // values for "when" passed to Fl::add_fd()
//  FL_READ   = 1, /**< Call the callback when there is data to be read. */
//  FL_WRITE  = 4, /**< Call the callback when data can be written without blocking. */
//  FL_EXCEPT = 8  /**< Call the callback if an exception occurs on the file. */
//};

/** visual types and Fl_Gl_Window::mode() (values match Glut) */
cenum Fl_Mode = 
  FL_RGB,//	= 0,
  FL_INDEX,//	= 1,
  FL_SINGLE,//	= 0,
  FL_DOUBLE,//	= 2,
  FL_ACCUM,//	= 4,
  FL_ALPHA,//	= 8,
  FL_DEPTH,//	= 16,
  FL_STENCIL,//	= 32,
  FL_RGB8,//	= 64,
  FL_MULTISAMPLE,//= 128,
  FL_STEREO,//     = 256,
  FL_FAKE_SINGLE;// = 512	// Fake single buffered windows using double-buffer

typedef fl_mode = Fl_Mode;

// image alpha blending

//const FL_IMAGE_WITH_ALPHA 0x40000000

/** Damage masks */
//enum Fl_Damage {
//  FL_DAMAGE_CHILD    = 0x01, /**< A child needs to be redrawn. */
//  FL_DAMAGE_EXPOSE   = 0x02, /**< The window was exposed. */
//  FL_DAMAGE_SCROLL   = 0x04, /**< The Fl_Scroll widget was scrolled. */
//  FL_DAMAGE_OVERLAY  = 0x08, /**< The overlay planes need to be redrawn. */
//  FL_DAMAGE_USER1    = 0x10, /**< First user-defined damage bit. */
//  FL_DAMAGE_USER2    = 0x20, /**< Second user-defined damage bit. */
//  FL_DAMAGE_ALL      = 0x80  /**< Everything needs to be redrawn. */
//};

// FLTK 1.0.x compatibility definitions...
//#  ifdef FLTK_1_0_COMPAT
//#    define contrast	fl_contrast
//#    define down	fl_down
//#    define frame	fl_frame
//#    define inactive	fl_inactive
//#  endif // FLTK_1_0_COMPAT

//#endif

cenum Fl_Boxtype = // boxtypes (if you change these you must fix fl_boxtype.C):

  FL_NO_BOX,		///< nothing is drawn at all, this box is invisible
  FL_FLAT_BOX,			///< a flat box
  FL_UP_BOX,			///< see figure 1
  FL_DOWN_BOX,			///< see figure 1
  FL_UP_FRAME,			///< see figure 1
  FL_DOWN_FRAME,		///< see figure 1
  FL_THIN_UP_BOX,		///< see figure 1
  FL_THIN_DOWN_BOX,		///< see figure 1
  FL_THIN_UP_FRAME,		///< see figure 1
  FL_THIN_DOWN_FRAME,		///< see figure 1
  FL_ENGRAVED_BOX,		///< see figure 1
  FL_EMBOSSED_BOX,		///< see figure 1
  FL_ENGRAVED_FRAME,		///< see figure 1
  FL_EMBOSSED_FRAME,		///< see figure 1
  FL_BORDER_BOX,		///< see figure 1
  _FL_SHADOW_BOX,		///< see figure 1
  FL_BORDER_FRAME,		///< see figure 1
  _FL_SHADOW_FRAME,		///< see figure 1
  _FL_ROUNDED_BOX,		///< see figure 1
  _FL_RSHADOW_BOX,		///< see figure 1
  _FL_ROUNDED_FRAME,		///< see figure 1
  _FL_RFLAT_BOX,		///< see figure 1
  _FL_ROUND_UP_BOX,		///< see figure 1
  _FL_ROUND_DOWN_BOX,		///< see figure 1
  _FL_DIAMOND_UP_BOX,		///< see figure 1
  _FL_DIAMOND_DOWN_BOX,		///< see figure 1
  _FL_OVAL_BOX,			///< see figure 1
  _FL_OSHADOW_BOX,		///< see figure 1
  _FL_OVAL_FRAME,		///< see figure 1
  _FL_OFLAT_BOX,		///< see figure 1
  _FL_PLASTIC_UP_BOX,		///< plastic version of FL_UP_BOX
  _FL_PLASTIC_DOWN_BOX,		///< plastic version of FL_DOWN_BOX
  _FL_PLASTIC_UP_FRAME,		///< plastic version of FL_UP_FRAME
  _FL_PLASTIC_DOWN_FRAME,	///< plastic version of FL_DOWN_FRAME
  _FL_PLASTIC_THIN_UP_BOX,	///< plastic version of FL_THIN_UP_BOX
  _FL_PLASTIC_THIN_DOWN_BOX,	///< plastic version of FL_THIN_DOWN_BOX
  _FL_PLASTIC_ROUND_UP_BOX,	///< plastic version of FL_ROUND_UP_BOX
  _FL_PLASTIC_ROUND_DOWN_BOX,	///< plastic version of FL_ROUND_DOWN_BOX
  _FL_GTK_UP_BOX,		///< gtk+ version of FL_UP_BOX
  _FL_GTK_DOWN_BOX,		///< gtk+ version of FL_DOWN_BOX
  _FL_GTK_UP_FRAME,		///< gtk+ version of FL_UP_FRAME
  _FL_GTK_DOWN_FRAME,		///< gtk+ version of FL_DOWN_RAME
  _FL_GTK_THIN_UP_BOX,		///< gtk+ version of FL_THIN_UP_BOX
  _FL_GTK_THIN_DOWN_BOX,	///< gtk+ version of FL_THIN_DOWN_BOX
  _FL_GTK_THIN_UP_FRAME,	///< gtk+ version of FL_UP_FRAME
  _FL_GTK_THIN_DOWN_FRAME,	///< gtk+ version of FL_THIN_DOWN_FRAME
  _FL_GTK_ROUND_UP_BOX,		///< gtk+ version of FL_ROUND_UP_BOX
  _FL_GTK_ROUND_DOWN_BOX,	///< gtk+ version of FL_ROUND_DOWN_BOX
  FL_FREE_BOXTYPE;		///< the first free box type for creation of new box types
typedef fl_boxtype = Fl_Boxtype;
 fun fl_define_FL_ROUND_UP_BOX: 1->fl_boxtype;
//#define FL_ROUND_UP_BOX fl_define_FL_ROUND_UP_BOX()
//#define FL_ROUND_DOWN_BOX (Fl_Boxtype)(fl_define_FL_ROUND_UP_BOX()+1)
//extern FL_EXPORT Fl_Boxtype fl_define_FL_SHADOW_BOX();
//#define FL_SHADOW_BOX fl_define_FL_SHADOW_BOX()
//#define FL_SHADOW_FRAME (Fl_Boxtype)(fl_define_FL_SHADOW_BOX()+2)
//extern FL_EXPORT Fl_Boxtype fl_define_FL_ROUNDED_BOX();
//#define FL_ROUNDED_BOX fl_define_FL_ROUNDED_BOX()
//#define FL_ROUNDED_FRAME (Fl_Boxtype)(fl_define_FL_ROUNDED_BOX()+2)
//extern FL_EXPORT Fl_Boxtype fl_define_FL_RFLAT_BOX();
//#define FL_RFLAT_BOX fl_define_FL_RFLAT_BOX()
//extern FL_EXPORT Fl_Boxtype fl_define_FL_RSHADOW_BOX();
//#define FL_RSHADOW_BOX fl_define_FL_RSHADOW_BOX()
//extern FL_EXPORT Fl_Boxtype fl_define_FL_DIAMOND_BOX();
//#define FL_DIAMOND_UP_BOX fl_define_FL_DIAMOND_BOX()
//#define FL_DIAMOND_DOWN_BOX (Fl_Boxtype)(fl_define_FL_DIAMOND_BOX()+1)
//extern FL_EXPORT Fl_Boxtype fl_define_FL_OVAL_BOX();
//#define FL_OVAL_BOX fl_define_FL_OVAL_BOX()
//#define FL_OSHADOW_BOX (Fl_Boxtype)(fl_define_FL_OVAL_BOX()+1)
//#define FL_OVAL_FRAME (Fl_Boxtype)(fl_define_FL_OVAL_BOX()+2)
//#define FL_OFLAT_BOX (Fl_Boxtype)(fl_define_FL_OVAL_BOX()+3)

//extern FL_EXPORT Fl_Boxtype fl_define_FL_PLASTIC_UP_BOX();
//#define FL_PLASTIC_UP_BOX fl_define_FL_PLASTIC_UP_BOX()
//#define FL_PLASTIC_DOWN_BOX (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+1)
//#define FL_PLASTIC_UP_FRAME (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+2)
//#define FL_PLASTIC_DOWN_FRAME (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+3)
//#define FL_PLASTIC_THIN_UP_BOX (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+4)
//#define FL_PLASTIC_THIN_DOWN_BOX (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+5)
//#define FL_PLASTIC_ROUND_UP_BOX (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+6)
//#define FL_PLASTIC_ROUND_DOWN_BOX (Fl_Boxtype)(fl_define_FL_PLASTIC_UP_BOX()+7)

//extern FL_EXPORT Fl_Boxtype fl_define_FL_GTK_UP_BOX();
//#define FL_GTK_UP_BOX fl_define_FL_GTK_UP_BOX()
//#define FL_GTK_DOWN_BOX (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+1)
//#define FL_GTK_UP_FRAME (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+2)
//#define FL_GTK_DOWN_FRAME (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+3)
//#define FL_GTK_THIN_UP_BOX (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+4)
//#define FL_GTK_THIN_DOWN_BOX (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+5)
//#define FL_GTK_THIN_UP_FRAME (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+6)
//#define FL_GTK_THIN_DOWN_FRAME (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+7)
//#define FL_GTK_ROUND_UP_BOX (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+8)
//#define FL_GTK_ROUND_DOWN_BOX (Fl_Boxtype)(fl_define_FL_GTK_UP_BOX()+9)

// conversions of box types to other boxtypes:
/**
  Get the filled version of a frame.
  If no filled version of a given frame exists, the behavior of this function
  is undefined and some random box or frame is returned.
 */
//inline Fl_Boxtype fl_box(Fl_Boxtype b) {
//  return (Fl_Boxtype)((b<FL_UP_BOX||b%4>1)?b:(b-2));
//}
/**
  Get the "pressed" or "down" version of a box.
  If no "down" version of a given box exists, the behavior of this function
  is undefined and some random box or frame is returned.
 */
//inline Fl_Boxtype fl_down(Fl_Boxtype b) {
//  return (Fl_Boxtype)((b<FL_UP_BOX)?b:(b|1));
//}
/**
  Get the unfilled, frame only version of a box.
  If no frame version of a given box exists, the behavior of this function
  is undefined and some random box or frame is returned.
 */
//inline Fl_Boxtype fl_frame(Fl_Boxtype b) {
//  return (Fl_Boxtype)((b%4<2)?b:(b+2));
//}

type Fl_Align = "Fl_Align";
typedef fl_align = Fl_Align;
const FL_ALIGN_CENTER:Fl_Align;//		= (Fl_Align)0;
  /** Align the label at the top of the widget. Inside labels appear below the top,
      outside labels are drawn on top of the widget. */
const FL_ALIGN_TOP:Fl_Align;//		= (Fl_Align)1;
  /** Align the label at the bottom of the widget. */
const FL_ALIGN_BOTTOM:Fl_Align;//		= (Fl_Align)2;
  /** Align the label at the left of the widget. Inside labels appear left-justified
      starting at the left side of the widget, outside labels are right-justified and
      drawn to the left of the widget. */
const FL_ALIGN_LEFT:Fl_Align;//		= (Fl_Align)4;
  /** Align the label to the right of the widget. */
const FL_ALIGN_RIGHT:Fl_Align;//		= (Fl_Align)8;
  /** Draw the label inside of the widget. */
const FL_ALIGN_INSIDE:Fl_Align;//		= (Fl_Align)16;
  /** If the label contains an image, draw the text on top of the image. */
const FL_ALIGN_TEXT_OVER_IMAGE:Fl_Align;//	= (Fl_Align)0x0020;
  /** If the label contains an image, draw the text below the image. */
const FL_ALIGN_IMAGE_OVER_TEXT:Fl_Align;//	= (Fl_Align)0x0000;
  /** All parts of the label that are lager than the widget will not be drawn . */
const FL_ALIGN_CLIP:Fl_Align;//		= (Fl_Align)64;
  /** Wrap text that does not fit the width of the widget. */
const FL_ALIGN_WRAP:Fl_Align;//		= (Fl_Align)128;
  /** If the label contains an image, draw the text to the right of the image. */
const FL_ALIGN_IMAGE_NEXT_TO_TEXT:Fl_Align;// = (Fl_Align)0x0100;
  /** If the label contains an image, draw the text to the left of the image. */
const FL_ALIGN_TEXT_NEXT_TO_IMAGE:Fl_Align;// = (Fl_Align)0x0120;
/** If the label contains an image, draw the image or deimage in the background. */
const FL_ALIGN_IMAGE_BACKDROP:Fl_Align;//  = (Fl_Align)0x0200;
const FL_ALIGN_TOP_LEFT:Fl_Align;//	= FL_ALIGN_TOP | FL_ALIGN_LEFT;
const FL_ALIGN_TOP_RIGHT:Fl_Align;//	= FL_ALIGN_TOP | FL_ALIGN_RIGHT;
const FL_ALIGN_BOTTOM_LEFT:Fl_Align;//	= FL_ALIGN_BOTTOM | FL_ALIGN_LEFT;
const FL_ALIGN_BOTTOM_RIGHT:Fl_Align;//	= FL_ALIGN_BOTTOM | FL_ALIGN_RIGHT;
const FL_ALIGN_LEFT_TOP:Fl_Align;//	= 0x0007; // magic value
const FL_ALIGN_RIGHT_TOP:Fl_Align;//	= 0x000b; // magic value
const FL_ALIGN_LEFT_BOTTOM:Fl_Align;//	= 0x000d; // magic value
const FL_ALIGN_RIGHT_BOTTOM:Fl_Align;//	= 0x000e; // magic value
const FL_ALIGN_NOWRAP:Fl_Align;//		= (Fl_Align)0; // for back compatibility
const FL_ALIGN_POSITION_MASK:Fl_Align;//   = 0x000f; // left, right, top, bottom
const FL_ALIGN_IMAGE_MASK:Fl_Align;//      = 0x0320; // l/r, t/b, backdrop
/*@}*/

const FL_SHIFT:int;		///< One of the shift keys is down
const FL_CAPS_LOCK:int;		///< The caps lock is on
const FL_CTRL:int;			///< One of the ctrl keys is down
const FL_ALT:int;			///< One of the alt keys is down
const FL_NUM_LOCK:int;		///< The num lock is on
					// most X servers do this?
const FL_META:int;			///< One of the meta/Windows keys is down
					// correct for XFree86
const FL_SCROLL_LOCK:int;		///< The scroll lock is on
					// correct for XFree86
const FL_BUTTON1:int;		///< Mouse button 1 is pushed
const FL_BUTTON2:int;		///< Mouse button 2 is pushed
const FL_BUTTON3:int;		///< Mouse button 3 is pushed
const FL_BUTTONS:int;		///< Any mouse button is pushed
//const FL_BUTTON(n)	(0x00800000<<(n)) ///< Mouse button n (n > 0) is pushed

const FL_KEY_MASK:int; 		///< All keys are 16 bit for now 
const FL_COMMAND:int;
const FL_CONTROL:int;

const FL_F:int;
@h3   \brief indicate what mouse buttons pop up the menu.
   
   Values for type() used to indicate what mouse buttons pop up the menu. 
   Fl_Menu_Button::POPUP3 is usually what you want.
@felix
  header """
// Enum is in site Fl_Menu_Button CXX class not sure how to bind
// with cenum so just recreating it where it is needed

enum popup_buttons {POPUP1 = 1, /**< pops up with the mouse 1st button. */
    POPUP2,  /**< pops up with the mouse 2nd button. */
    POPUP12, /**< pops up with the mouse 1st or 2nd buttons. */
    POPUP3,   /**< pops up with the mouse 3rd button. */
    POPUP13,  /**< pops up with the mouse 1st or 3rd buttons. */
    POPUP23,  /**< pops up with the mouse 2nd or 3rd buttons. */
    POPUP123 /**< pops up with any mouse button. */
  };
""";     
  cenum popup_buttons = POPUP1, /**< pops up with the mouse 1st button. */
    POPUP2,  /**< pops up with the mouse 2nd button. */
    POPUP12, /**< pops up with the mouse 1st or 2nd buttons. */
    POPUP3,   /**< pops up with the mouse 3rd button. */
    POPUP13,  /**< pops up with the mouse 1st or 3rd buttons. */
    POPUP23,  /**< pops up with the mouse 2nd or 3rd buttons. */
    POPUP123; /**< pops up with any mouse button. */

